<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Tumblr Unread Items"
	initialize="init()"
	height="700">

    <mx:Style>
        WindowedApplication
        {
        }
    </mx:Style>
    <mx:Script>
	<![CDATA[
	
import mx.controls.Alert;
import flash.events.*;
import flash.utils.*;
import flash.errors.*;
import com.tsuyuguchi.utils.*;
import org.hatayan.flashNetComportConnector.*;
import org.hatayan.flashNetComportConnector.Event.*;

/*** Tumblr ****************************************************/
private const URL_TUMBLR_IPHONE:String = "http://www.tumblr.com/iphone";
private const URL_TUMBLR_DASHBOARD:String = "http://www.tumblr.com/dashboard";

/*** Timer ****************************************************/
private const TIMEOUT_INTERVAL:int = 60 * 1000; // msecs
private var timer:Timer;

/*** SerialPort ****************************************************/
private const SP_START:String = "START";
private const SP_STOP:String = "STOP";
private const SPORT_CLOSE:int = 0;
private const SPORT_OPEN:int = 1;
private var sp:SerialPort;

/*** Trace *********************************************************/
private const TRACE_LEVEL:int = MyTrace.DEBUG;
private var trace:MyTrace = null;

/*** Button Handler**************************************************/
private const buttonLabel:Array = [SP_START, SP_STOP];
private const sport_handler:Array = [
	[nullHandler, openPort], 
	[closePort, nullHandler]
];
private var sport_state:int; // SPORT_*

/*UIに値を表示*/
private function print_trace(message:String):void {
	Input_textArea.text = Input_textArea.text + message + "\n";
	Input_textArea.callLater(scrollPosition);
}
private function scrollPosition():void {
	Input_textArea.verticalScrollPosition = Input_textArea.maxVerticalScrollPosition;
}


private function init():void {
	trace = new MyTrace( TRACE_LEVEL, print_trace );

	browser.location = URL_TUMBLR_DASHBOARD;
	browser.htmlLoader.addEventListener(Event.COMPLETE, onHTMLComplete);
	timer = new Timer(TIMEOUT_INTERVAL, 0 );
	timer.addEventListener( TimerEvent.TIMER, timeoutHandler );


	sport_state = SPORT_CLOSE;
	sp = new SerialPort();
	sp.addEventListener(SerialErrorEvent.CONNECT_ERROR, connectErrorHandler );
	sp.addEventListener(SerialEvent.ON_STR_DATA,strDataHandler);
	sp.addEventListener(Event.CONNECT,connectHandler);
	sp.addEventListener(Event.CLOSE,closeHandler);
	sp.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
	sp.addEventListener(ProgressEvent.PROGRESS,progressHandler);
	sp.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
	sp.addEventListener(SerialErrorEvent.FULL_CONNECTION_ERROR,fullConnectionErrorHandler);
	sp.addEventListener(SerialErrorEvent.CONNECT_ERROR,connectErrorHandler);

	Input_button.addEventListener( MouseEvent.CLICK, buttonClick );

}

private function showError( msg:String ):void{
	Alert.show( msg );
}

private function nullHandler():void{}

include "./SerialHandler.as"


private function openPort():void{
	var ipaddr:String = Input_ipaddr.text;
	var portStr:String = Input_port.text;

	if( !ipaddr ){
		showError("IP アドレスが入力されていません");
		return;
	}
	if( !portStr ){
		showError("Port が入力されていません");
		return;
	}
	var port:int = parseInt( portStr )
	if( isNaN( port ) ){
		showError("Port が数値ではありません");
		return;
	}

	sp.openRemoteComport( ipaddr, port );
}

private function closePort():void{
	sp.close();
	sport_state = SPORT_CLOSE;
	setButtonLabel(sport_state);
}

private function closePort2():void{
	sport_state = SPORT_CLOSE;
	setButtonLabel(sport_state);
	sp = null;
}



private function buttonClick(e:Event):void {
	var pre_state:int = sport_state;
	sport_state ^= 1; // toggle
	sport_handler[pre_state][sport_state]();
}

private function setButtonLabel( sport_state:int ):void{
	Input_button.label = buttonLabel[sport_state];
}


private function onHTMLComplete(event:Event):void {

	var hl:HTMLLoader = HTMLLoader(event.target);
	var document:Object = hl.window.document;

	Url_label.text = "url: " + document.location;

	if( document.location ==  URL_TUMBLR_IPHONE ){
		document.location = URL_TUMBLR_DASHBOARD;
		return;
	}
	
	if( document.location != URL_TUMBLR_DASHBOARD ){
		timer.stop();
		trace.debug("timer stop");
		return;
	}
	
	trace.debug(document.title);
	trace.debug(document.location);
	timer.start();
	trace.debug("timer start");

}

private function timeoutHandler( event:TimerEvent ):void {
	trace.debug("timeout");
	var document:Object = browser.htmlLoader.window.document;
	var title:String = document.title;
	trace.debug("title: " + title);
	var pattern:RegExp = new RegExp("\\((\\d+)\\)");
	var result:Array = title.match(pattern);

	var data:String;
	if( result == null ){
		data = "0";
	}
	else if( result.length == 2 ){
		trace.debug("match:" + result[1]);
		data = result[1];
	}
	else{
		data = "0";
	}
	sendNumOfUnreadItems( data );

}

private function sendNumOfUnreadItems( str:String ):void{
	var data:String = "[" + str + "]";
	sp.sendString( data );
	trace.debug("send: " + data );
}

	]]>
    </mx:Script>
    <mx:VBox width="100%">
    <mx:HTML id="browser" width="100%" height="250"></mx:HTML>
    <mx:Label id="Url_label" width="100%" />
    <mx:Form width="100%" paddingTop="5" borderStyle="inset" borderThickness="2" borderColor="#CCCCCC">
      <mx:FormHeading label="FlashNetComportConnector の設定"/>
      <mx:FormItem label="IP Address">
        <mx:TextInput id="Input_ipaddr" width="100%" text="localhost" />
      </mx:FormItem>
      <mx:FormItem label="Port">
        <mx:TextInput id="Input_port" width="100%" text="1888" />
      </mx:FormItem>
    </mx:Form>
    <mx:Button id="Input_button" fontSize="18" width="100%" height="50" label="START" />
    
    <mx:TextArea width="100%" id="Input_textArea" height="150" verticalScrollPolicy="on">
    </mx:TextArea>
   
    </mx:VBox>

</mx:WindowedApplication>