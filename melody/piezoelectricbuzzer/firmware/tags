ISR	interrupt.c	/^ISR(TIMER1_COMPA_vect){$/
Mmain	main.c	/^int main(void) {$/
buzzer_init	buzzer.c	/^void buzzer_init(void){$/
buzzer_toggle	buzzer.h	/^#define buzzer_toggle() (PORTD ^= _BV(PORTD5));$/
get_score	table.c	/^uint8_t *get_score( uint16_t id ){$/
is_score_end	sound_ctlr.c	/^uint8_t is_score_end(void){$/
led_init	led.c	/^void led_init(){$/
led_set	led.c	/^void led_set( uint8_t onoff ){$/
led_toggle	led.c	/^void led_toggle(){$/
note_count_reset	timer.c	/^void note_count_reset(void){$/
note_counter_increment	timer.c	/^uint8_t note_counter_increment(void){$/
note_timer_init	timer.h	/^#define note_timer_init() do{ \\$/
note_timer_set_counter	timer.c	/^void note_timer_set_counter(uint16_t count){$/
note_timer_start	timer.c	/^void note_timer_start(){$/
note_timer_stop	timer.c	/^void note_timer_stop(){$/
pitch_timer_init	timer.h	/^#define pitch_timer_init() do{ \\$/
pitch_timer_is_stopped	timer.h	/^#define pitch_timer_is_stopped() \\$/
pitch_timer_set_counter	timer.c	/^void pitch_timer_set_counter(uint16_t count){$/
pitch_timer_start	timer.c	/^void pitch_timer_start(void){$/
pitch_timer_stop	timer.c	/^void pitch_timer_stop(void){$/
set_buzzer_output	buzzer.c	/^void set_buzzer_output(uint8_t onoff ){$/
sound_ctlr_init	sound_ctlr.c	/^void sound_ctlr_init(uint8_t *_score_table, uint16/
sound_get_position	sound_ctlr.c	/^uint16_t sound_get_position(void){$/
sound_increment	sound_ctlr.c	/^void sound_increment(void){$/
sound_lookup	sound_ctlr.c	/^void sound_lookup(uint8_t *pitch, uint8_t *note ){/
sound_next	sound_ctlr.c	/^void sound_next(void){$/
sound_reset_position	sound_ctlr.c	/^void sound_reset_position(void){$/
sound_set	sound_ctlr.c	/^void sound_set( uint8_t pitch, uint8_t note ){$/
sound_start	sound_ctlr.c	/^void sound_start( void ){$/
sound_stop	sound_ctlr.c	/^void sound_stop( void ){$/
sw_get	switch.c	/^uint8_t sw_get(){$/
sw_init	switch.c	/^void sw_init(){$/
